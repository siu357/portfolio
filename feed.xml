<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-05T15:05:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">이윤찬의 포트폴리오</title><subtitle>게임 클라이언트 프로그래머를 지망하고 있습니다. &lt;br/&gt; Available Skills : C++, C#, Unity Engine, Windows API, DirectX9, OpenCV &lt;br/&gt; 이메일 주소 : siu357@naver.com
</subtitle><author><name>이윤찬</name></author><entry><title type="html">Fly And Shoot</title><link href="http://localhost:4000/fly-and-shoot" rel="alternate" type="text/html" title="Fly And Shoot" /><published>2024-01-01T00:00:00+09:00</published><updated>2024-01-01T00:00:00+09:00</updated><id>http://localhost:4000/Fly-and-Shoot</id><content type="html" xml:base="http://localhost:4000/fly-and-shoot">&lt;h1 id=&quot;소개&quot;&gt;소개&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;제작 언어 및 엔진&lt;/strong&gt; : C++, DirectX9&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제작 기간&lt;/strong&gt; : 약 2주&lt;/p&gt;

&lt;p&gt;다이렉트X9으로 제작한 간단한 비행/슈팅 데모입니다.&lt;/p&gt;

&lt;h1 id=&quot;플레이-영상&quot;&gt;플레이 영상&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bIe2OedLrOE?si=LJWHAzUVSbFePoYt&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;ul&gt;
  &lt;li&gt;주요 타임 스탬프
    &lt;ul&gt;
      &lt;li&gt;00:05 : 개체의 회전&lt;/li&gt;
      &lt;li&gt;00:24 : 전후좌우 이동&lt;/li&gt;
      &lt;li&gt;00:43 : 상하 이동&lt;/li&gt;
      &lt;li&gt;00:51 : 크기 조정&lt;/li&gt;
      &lt;li&gt;01:08 : 뷰 모드 전환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;조작
    &lt;ul&gt;
      &lt;li&gt;전/후진 및 좌/우측 이동&lt;/li&gt;
      &lt;li&gt;방향전환&lt;/li&gt;
      &lt;li&gt;Scaling&lt;/li&gt;
      &lt;li&gt;상승/하강&lt;/li&gt;
      &lt;li&gt;뷰 모드 전환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI&lt;/li&gt;
  &lt;li&gt;빌보드&lt;/li&gt;
  &lt;li&gt;버텍스 버퍼&lt;/li&gt;
  &lt;li&gt;인덱스 버퍼&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기술-및-코드&quot;&gt;주요 기술 및 코드&lt;/h1&gt;

&lt;h2 id=&quot;1-이동-및-회전&quot;&gt;1. 이동 및 회전&lt;/h2&gt;

&lt;p&gt;다이렉트X는 &lt;strong&gt;렌더링 파이프라인&lt;/strong&gt;이라 부르는 일련의 연산 과정을 통해 결과물이 출력되는데, 이 중 &lt;strong&gt;버텍스 쉐이더&lt;/strong&gt; 단계에서 물체의 이동 및 회전 등의 좌표 처리를 실시합니다.&lt;/p&gt;

&lt;p&gt;버텍스 쉐이더의 과정을 요약하면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;로컬 좌표계에 존재하는 오브젝트를 3D 월드 좌표에 배치 (World Transform)
  &lt;br /&gt; World Transform의 3가지 세부과정
    &lt;ul&gt;
      &lt;li&gt;Scale (크기 변화)&lt;/li&gt;
      &lt;li&gt;Rotation (회전)&lt;/li&gt;
      &lt;li&gt;Translation (이동)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;월드 좌표계를 카메라의 위치, 바라보는 방향에 맞추어 변환 (View Transform)&lt;/li&gt;
  &lt;li&gt;결과물을 2D 스크린상으로 투영 (Projection Transform)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각은 행렬(Matrix)로 표현되며, 이 행렬을 연산하는 것으로 과정이 진행됩니다.&lt;/p&gt;

&lt;p&gt;이하는 비행체 본체의 행렬연산 과정입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VOID Translate()
{
    if (GetAsyncKeyState(KeyW))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecFront, &amp;amp;matRot);
        vecWorldDir += vecTemp * 0.1 * __MOVEMENT__;
    }
    if (GetAsyncKeyState(KeyA))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecSide, &amp;amp;matRot);
        vecWorldDir -= vecTemp * 0.1 * __MOVEMENT__;
    }
    if (GetAsyncKeyState(KeyS))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecFront, &amp;amp;matRot);
        vecWorldDir -= vecTemp * 0.1 * __MOVEMENT__;
    }
    if (GetAsyncKeyState(KeyD))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecSide, &amp;amp;matRot);
        vecWorldDir += vecTemp * 0.1 * __MOVEMENT__;
    }
    if (GetAsyncKeyState(VK_SPACE))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecVertical, &amp;amp;matRot);
        vecWorldDir += vecTemp * 0.1 * __MOVEMENT__;
    }
    if (GetAsyncKeyState(VK_CONTROL))
    {
        D3DXVec3TransformCoord(&amp;amp;vecTemp, &amp;amp;vecVertical, &amp;amp;matRot);
        vecWorldDir -= vecTemp * 0.1 * __MOVEMENT__;
    }
}

VOID Render()
{
    // 전략
    D3DXMatrixScaling(&amp;amp;matScale, vecScale.x, vecScale.y, vecScale.z);
    D3DXMatrixRotationYawPitchRoll(&amp;amp;matRot, vecDegree.y * D3DX_PI / 180, vecDegree.x * D3DX_PI / 180, vecDegree.z * D3DX_PI / 180);
    D3DXMatrixTranslation(&amp;amp;matTranslation, vecWorldDir.x + vecBasePos.x, vecWorldDir.y + vecBasePos.y, vecWorldDir.z + vecBasePos.z);
    
    matWorld = matScale * matRot * matTranslation; // Scale * Rot * Translate 순으로.
    g_pd3dDevice-&amp;gt;SetTransform(D3DTS_WORLD, &amp;amp;matWorld);
    // 후략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 객체의 회전값을 가진 행렬인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matRot&lt;/code&gt;에 단위 방향벡터를 곱합니다.
 이동속도의 조절을 위해 상수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.1 * __MOVEMENT__&lt;/code&gt;를 곱해준 후 결과값을 객체의 위치값 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vecWorldDir&lt;/code&gt;에 누적합니다.&lt;/p&gt;

&lt;p&gt;최종적으로 개체의 위치값에 해당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matTranslation&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vecWorldDir&lt;/code&gt;에 초기 위치값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vecBasePos&lt;/code&gt;를 더하여 설정합니다.&lt;/p&gt;

&lt;p&gt;화면에 출력하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render()&lt;/code&gt;과정에서 Scale-&amp;gt;Rotation-&amp;gt;Translation 순으로 연산하여 이를 World Transform으로 설정합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-총알의-발사&quot;&gt;2. 총알의 발사&lt;/h2&gt;
&lt;p&gt;총알은 별도의 클래스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CBullet&lt;/code&gt;에서 필요한 요소와 관련한 행렬 및 벡터, 함수를 다룹니다.
 부모에 해당하는 비행체 본체의 발사 순간의 위치와 회전값을 받아 초기화하며,
 유니티의 오브젝트 풀링 개념을 채용해 총알의 거리가 일정량 이상이 되면 다시 초기화해 재활용하는 방식으로 오버헤드를 줄였습니다.&lt;/p&gt;

&lt;p&gt;총알 발사 로직의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VOID CBullet::BulletTranslate(D3DXVECTOR3 vecFront)
{
	D3DXVECTOR3 vecTempBullet;
	D3DXVec3TransformCoord(&amp;amp;vecTempBullet, &amp;amp;vecFront, GetMatRotBulletAddress());
	SetVecWorldDir(GetVecWorldDir() + vecTempBullet * 0.1f * __MOVEMENT_BULLET__);
	
	SetDistance(GetDistance() + 0.1f);
}

VOID CBullet::BulletReset(D3DXMATRIX matParent, D3DXMATRIX matRot)
{
	// Object Pooling
	if (GetDistance() &amp;gt; __BULLET_DISTANCE__)
	{
	//D3DXVECTOR3 vecWorldDir = GetVecWorldDirParent;

	// 위치 초기화
	SetVecWorldDir(D3DXVECTOR3(0, 0, 0));

	// 부모의 회전 matrix와 같게 (같은 회전된 형태로 발사됨)
	SetMatRotBullet(matRot);

	// 본체의 위치에서 발사가 시작되도록 부모의 위치 설정
	D3DXVECTOR3 vecTempDir;
	D3DXVec3TransformCoord(&amp;amp;vecTempDir, &amp;amp;vecBasePos, &amp;amp;matParent);
	D3DXMatrixTranslation(GetMatTranslateParentAddress(), vecTempDir.x, vecTempDir.y, vecTempDir.z);

	SetDistance(.0f);
	}
}

VOID Render()
{
    // 전략
    g_pd3dDevice-&amp;gt;SetTexture(0, g_ppTexture_Bullet);
    g_pd3dDevice-&amp;gt;SetStreamSource(0, g_pVB_Bullet, 0, sizeof(CUSTOMVERTEX));

    D3DXVECTOR3 tempVecDegreeBullet = bullet-&amp;gt;GetVecDegree();
    D3DXVECTOR3 tempVecBullet = bullet-&amp;gt;GetVecPos();
    D3DXVECTOR3 tempVecWorldDirBullet = bullet-&amp;gt;GetVecWorldDir();

    D3DXMatrixScaling(&amp;amp;matScale, vecScale.x / 5, vecScale.y / 5, vecScale.z / 5);
    D3DXMatrixRotationYawPitchRoll(bullet-&amp;gt;GetMatRevRotBulletAddress(), tempVecDegreeBullet.y * D3DX_PI / 180, tempVecDegreeBullet.x * D3DX_PI / 180, tempVecDegreeBullet.z * D3DX_PI / 180);
    D3DXMatrixTranslation(bullet-&amp;gt;GetMatTranslateBulletAddress(), tempVecWorldDirBullet.x + tempVecBullet.x, tempVecWorldDirBullet.y + tempVecBullet.y, tempVecWorldDirBullet.z + tempVecBullet.z);

    bullet-&amp;gt;SetMatWorldBullet(matScale * bullet-&amp;gt;GetMatRotBullet() * bullet-&amp;gt;GetMatTranslateParent() * bullet-&amp;gt;GetMatRevRotBullet() * bullet-&amp;gt;GetMatTranslateBullet());
    g_pd3dDevice-&amp;gt;SetTransform(D3DTS_WORLD, bullet-&amp;gt;GetMatWorldBulletAddress());
    g_pd3dDevice-&amp;gt;DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 0, 24, 0, 6 * 2);
    // 후략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BulletTranslate()&lt;/code&gt;에서 총알의 위치를 담는 벡터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vecWorldDir&lt;/code&gt;의 위치값을 변화시키면서 이동한 거리를 누적시킵니다.&lt;/p&gt;

&lt;p&gt;이동한 거리가 정의한 수치인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__BULLET_DISTANCE__&lt;/code&gt;에 도달하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BulletReset()&lt;/code&gt;을 통해 총알의 위치와 회전값, 이동한 거리를 다시 초기화합니다.&lt;/p&gt;

&lt;p&gt;버텍스 쉐이더 단계에서 총알이 가진 위치, 회전 행렬을 토대로 배치하고 출력합니다.&lt;/p&gt;

&lt;p&gt;총알의 형태가 정육면체이기 때문에 총알 자체도 발사되는 방향에 맞게 회전되어야 하므로 추가적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matRevRotBullet&lt;/code&gt;을 선언하여 회전시켜줍니다.&lt;/p&gt;

&lt;p&gt;최종 행렬 연산 순서는 총알의 크기 -&amp;gt; 발사되는 위치의 회전(부모의 회전값) -&amp;gt; 부모의 위치 -&amp;gt; 총알 자체의 회전 -&amp;gt; 총알의 위치가 됩니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-카메라-뷰-모드-전환&quot;&gt;3. 카메라 뷰 모드 전환&lt;/h2&gt;
&lt;p&gt;많은 3D 게임들이 카메라의 바라보는 방향, 즉 View를 바꾸는 기능을 갖고 있습니다.&lt;/p&gt;

&lt;p&gt;해당 데모에서도 해당 기능을 구현했으며 개체의 뒤에서 바라보는 Back View, 위에서 바라보는 Top View, 대각선 위치에서 바라보는 Top Back View를 사전에 정의했습니다.&lt;/p&gt;

&lt;p&gt;이하는 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VOID SwitchView()
{
    if (GetAsyncKeyState(&apos;V&apos;))
    {
        switch (nViewMode)
        {
        case __BACK__:
            nViewMode = __TOP__;
            break;
        case __TOP__:
            nViewMode = __TOPBACK__;
            break;
        case __TOPBACK__:
            nViewMode = __BACK__;
            break;
        }
    }
}

VOID SetView()
{
    switch (nViewMode)
    {
    case __BACK__:
        vecEye = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y, vecWorldDir.z + vecBasePos.z - 3);
        vecLookAt = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y, vecWorldDir.z + vecBasePos.z);
        vecUp = D3DXVECTOR3(0, 1, 0);
        break;
    case __TOP__:
        vecEye = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y + 3, vecWorldDir.z + vecBasePos.z - 0.01);
        vecLookAt = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y, vecWorldDir.z + vecBasePos.z);
        vecUp = D3DXVECTOR3(0, 1, 0);
        break;
    case __TOPBACK__:
        vecEye = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y + 3, vecWorldDir.z + vecBasePos.z - 3);
        vecLookAt = D3DXVECTOR3(0, vecWorldDir.y + vecBasePos.y, vecWorldDir.z + vecBasePos.z);
        vecUp = D3DXVECTOR3(0, 1, 0);
        break;
    }
}

VOID Render()
{
    // 전략
    D3DXMATRIX tempViewTM;
    SetView();
    D3DXMatrixLookAtLH(&amp;amp;tempViewTM, &amp;amp;vecEye, &amp;amp;vecLookAt, &amp;amp;vecUp);
    g_pd3dDevice-&amp;gt;SetTransform(D3DTS_VIEW, &amp;amp;tempViewTM);
    // 후략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;View Transform은 Eye, LookAt, Up이라는 세 개의 벡터로 구성됩니다. Finite State Machine의 형태로 제어한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nViewMode&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwitchView()&lt;/code&gt;에서 순차적으로 전환하고,
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetView()&lt;/code&gt;에서 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nViewMode&lt;/code&gt;에 맞추어 Eye, LookAt, Up 벡터를 설정합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-빌보드-및-gui&quot;&gt;4. 빌보드 및 GUI&lt;/h2&gt;
&lt;p&gt;3D게임에서 주변 환경을 표현하는데 사용되는 것들로 나무, 구름 등이 있습니다.&lt;/p&gt;

&lt;p&gt;자연스럽고 사실적인 표현을 위해서는 많은 수가 배치되어야 하는데, 이들을 일일이 3D 폴리곤으로 출력하는 것은 오버헤드가 매우 큽니다.&lt;/p&gt;

&lt;p&gt;따라서 원거리에 있는 오브젝트들의 경우 2D 사각형의 형태로 간략화 후 카메라를 바라보도록 회전시켜 연산량을 줄이는데, 이러한 처리가 된 오브젝트들을 빌보드라고 부릅니다.&lt;/p&gt;

&lt;p&gt;빌보드와 GUI의 구현 과정입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define D3DFVF_CUSTOMVERTEX_UI (D3DFVF_XYZRHW | D3DFVF_TEX1)

VOID Render()
{
    // 전략
    // Billboard
    D3DXMatrixIdentity(&amp;amp;matRotBillboard);
    matRotBillboard._11 = tempViewTM._11;
    matRotBillboard._13 = tempViewTM._13;
    matRotBillboard._31 = tempViewTM._31;
    matRotBillboard._33 = tempViewTM._33;
    D3DXMatrixInverse(&amp;amp;matRotBillboard, NULL, &amp;amp;matRotBillboard);

    for (int i = 0; i &amp;lt; vVecBillboard.size(); i++)
    {
        D3DXMatrixTranslation(&amp;amp;matTranslationBillboard, vVecBillboard[i].x, vVecBillboard[i].y, vVecBillboard[i].z);
        matWorldBillboard = matRotBillboard * matTranslationBillboard;
        g_pd3dDevice-&amp;gt;SetTransform(D3DTS_WORLD, &amp;amp;matWorldBillboard);

        g_pd3dDevice-&amp;gt;SetTexture(0, g_ppTexture_Billboard);
        g_pd3dDevice-&amp;gt;SetStreamSource(0, g_pVB_Billboard, 0, sizeof(CUSTOMVERTEX));
        g_pd3dDevice-&amp;gt;SetFVF(D3DFVF_CUSTOMVERTEX);
        g_pd3dDevice-&amp;gt;SetIndices(g_pIB_Billboard);
        g_pd3dDevice-&amp;gt;DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 0, 4, 0, 1 * 2);
    }
    
    // UI
    g_pd3dDevice-&amp;gt;SetTexture(0, g_ppTextureUI);
    g_pd3dDevice-&amp;gt;SetFVF(D3DFVF_CUSTOMVERTEX_UI);
    g_pd3dDevice-&amp;gt;DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, verticesUI, sizeof(CUSTOMVERTEX2));
    // 후략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;빌보드에 해당하는 물체들은 항상 카메라를 응시하도록 회전시켜야 하므로 뷰 트랜스폼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tempViewTM&lt;/code&gt;의 y축에 대한 역행렬 정보를 회전행렬로 정의합니다.&lt;/p&gt;

&lt;p&gt;GUI는 항상 똑같은 위치에 2D의 형태로 출력되어야 하므로 버텍스 버퍼를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3DFVF_XYZRHW&lt;/code&gt;로 정의해 행렬변환 과정을 생략합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-버텍스인덱스-버퍼&quot;&gt;5. 버텍스/인덱스 버퍼&lt;/h2&gt;

&lt;p&gt;다이렉트X에서는 3D 물체를 출력하기 위해 물체의 정점(Vertices) 정보가 필요합니다. 이 정점을 미리 저장해 두는 것(Buffer)을 버텍스 버퍼라고 부릅니다.&lt;/p&gt;

&lt;p&gt;한 편, 삼각형의 집합으로 표현되는 폴리곤에서는 출력에 필요한 정점 정보가 필연적으로 중복됩니다. 이를 최소화 하여 메모리 사용량을 줄이는 것이 인덱스 버퍼로, 버텍스의 집합을 선언 후 몇 번째 버텍스들을 사용할 것인지 저장해 둡니다.&lt;/p&gt;

&lt;p&gt;이하는 버텍스 및 인덱스 버퍼 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HRESULT InitVB(LPDIRECT3DDEVICE9&amp;amp; g_pd3dDevice, LPDIRECT3DVERTEXBUFFER9&amp;amp; g_pVB, LPDIRECT3DTEXTURE9&amp;amp; g_ppTexture, VOID* pVertices, int n)
{
    int a, b;
    // Cube
    g_pd3dDevice-&amp;gt;CreateVertexBuffer(
        sizeof(vertices),
        0,
        D3DFVF_XYZ,
        D3DPOOL_DEFAULT,
        &amp;amp;g_pVB,
        NULL);
    D3DXCreateTextureFromFile(g_pd3dDevice, &quot;Skill_Dark_Sight.bmp&quot;, &amp;amp;g_ppTexture);
    a = sizeof(vertices);
    b = sizeof(CUSTOMVERTEX);

    g_pVB-&amp;gt;Lock(0, sizeof(vertices), (void**)&amp;amp;pVertices, 0);
    memcpy(pVertices, vertices, sizeof(vertices));
    g_pVB-&amp;gt;Unlock();
    return S_OK;
}

VOID InitIB(LPDIRECT3DDEVICE9&amp;amp; g_pd3dDevice, LPDIRECT3DINDEXBUFFER9&amp;amp; g_pIB)
{
	int iNumberOfIndex = sizeof(indices) / sizeof(WORD);

	g_pd3dDevice-&amp;gt;CreateIndexBuffer(
		sizeof(WORD) * iNumberOfIndex,
		0,
		D3DFMT_INDEX16,
		D3DPOOL_DEFAULT,
		&amp;amp;g_pIB,
		NULL);

	VOID* pIndices;

	g_pIB-&amp;gt;Lock(0, sizeof(WORD) * iNumberOfIndex, (void**)&amp;amp;pIndices, 0);
	memcpy(pIndices, indices, sizeof(indices));
	g_pIB-&amp;gt;Unlock();
}

HRESULT InitD3D(HWND hWnd)
{
    // 전략
    // Vertex Buffer 초기화
    InitVB(g_pd3dDevice, g_pVB, g_ppTexture, pVertices, 0);
    InitVB_Bullet(g_pd3dDevice, g_pVB_Bullet, g_ppTexture_Bullet, pVertices, 0);
    InitVB_Billboard(g_pd3dDevice, g_pVB_Billboard, g_ppTexture_Billboard, pVertices_Billboard, 0);

    // Index Buffer 초기화
    D3DXCreateTextureFromFile(g_pd3dDevice, &quot;HP_bar.bmp&quot;, &amp;amp;g_ppTextureUI);
    InitIB(g_pd3dDevice, g_pIB);
    InitIB_Billboard(g_pd3dDevice, g_pIB_Billboard);
    // 후략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;출력할 개체마다 따로 초기화를 진행하며, 전체 초기화 시에 버텍스/인덱스 버퍼 초기화를 실시합니다.
&lt;br /&gt;&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;</content><author><name>이윤찬</name></author><category term="DirectX9" /><category term="C++" /><category term="Game Project" /><summary type="html">소개</summary></entry><entry><title type="html">Jump For Your Life</title><link href="http://localhost:4000/jump-for-your-life" rel="alternate" type="text/html" title="Jump For Your Life" /><published>2023-11-01T00:00:00+09:00</published><updated>2023-11-01T00:00:00+09:00</updated><id>http://localhost:4000/Jump-for-Your-Life</id><content type="html" xml:base="http://localhost:4000/jump-for-your-life">&lt;h1 id=&quot;소개&quot;&gt;소개&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;제작 언어 및 엔진&lt;/strong&gt; : C++, Windows API&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제작 기간&lt;/strong&gt; : 약 2개월&lt;/p&gt;

&lt;p&gt;넥슨의 유명 게임 메이플스토리의 장애물 탈출 컨텐츠 ‘인내의 숲’을 모티브로 하여 만든 횡스크롤 게임으로, &lt;strong&gt;메이플스토리 원본 게임의 물리, 카메라워크, 시각효과 등을 유사하게 재현&lt;/strong&gt;하는데 초점을 맞췄습니다.&lt;/p&gt;

&lt;h1 id=&quot;플레이-영상&quot;&gt;플레이 영상&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5BVF3L-3T3o?si=-brmBlJSjwc-RAo9&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;ul&gt;
  &lt;li&gt;주요 타임 스탬프
    &lt;ul&gt;
      &lt;li&gt;00:04 : 기본 조작 및 가속/감속 물리&lt;/li&gt;
      &lt;li&gt;00:27 : 피격 효과&lt;/li&gt;
      &lt;li&gt;00:47 : 게임 플레이&lt;/li&gt;
      &lt;li&gt;00:53 : 카메라워크&lt;/li&gt;
      &lt;li&gt;01:10 : 스킬 사용&lt;/li&gt;
      &lt;li&gt;01:16 : 옵션&lt;/li&gt;
      &lt;li&gt;01:22 : UI 투명도&lt;/li&gt;
      &lt;li&gt;01:35 : 최대 FPS 설정&lt;/li&gt;
      &lt;li&gt;01:46 : 옵션 취소&lt;/li&gt;
      &lt;li&gt;01:58 : 스킬 알림이 : Classic&lt;/li&gt;
      &lt;li&gt;02:08 : 스킬 알림이 : Alpha Lerp&lt;/li&gt;
      &lt;li&gt;02:15 : 다른 환경의 맵&lt;/li&gt;
      &lt;li&gt;02:48 : 맵마다 고유한 마찰계수&lt;/li&gt;
      &lt;li&gt;03:00 : 시차(Parallax)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기본 설계
    &lt;ul&gt;
      &lt;li&gt;클래스의 상속 기능을 적극 활용해 기본 속성을 공유하는 다양한 몬스터를 쉽게 생성할 수 있음&lt;/li&gt;
      &lt;li&gt;맵, 타일도 클래스로 설계하여 다양한 형태를 쉽게 생성 가능&lt;/li&gt;
      &lt;li&gt;더블 버퍼링&lt;/li&gt;
      &lt;li&gt;동기화(컴퓨터의 성능에 물리가 영향받지 않음)&lt;/li&gt;
      &lt;li&gt;프레임레이트 조절&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;물리
    &lt;ul&gt;
      &lt;li&gt;원본 게임과 흡사한 물리&lt;/li&gt;
      &lt;li&gt;가속 및 감속 : 등가속/감속 운동&lt;/li&gt;
      &lt;li&gt;점프 : 2차함수를 기반으로 설계&lt;/li&gt;
      &lt;li&gt;맵마다 고유한 마찰계수&lt;/li&gt;
      &lt;li&gt;겉모습으로부터 독립적인 히트박스&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연출
    &lt;ul&gt;
      &lt;li&gt;원본 게임과 흡사한 연출&lt;/li&gt;
      &lt;li&gt;카메라워크 : 카메라와 플레이어의 거리에 따라 다른 속도로 보간&lt;/li&gt;
      &lt;li&gt;시차(Parallax) : Background와 Foreground의 움직임 차이로 입체 효과 부여&lt;/li&gt;
      &lt;li&gt;피격 시 폴짝이며 밀려남, 캐릭터가 깜빡거림&lt;/li&gt;
      &lt;li&gt;페이드 인/아웃&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최적화
    &lt;ul&gt;
      &lt;li&gt;컬링(Culling)으로 불필요한 출력 최소화&lt;/li&gt;
      &lt;li&gt;상황에 맞는 출력방식으로 연산 최적화 (BitBlt, TransparentBlt, StretchBlt, AlphaBlend…)&lt;/li&gt;
      &lt;li&gt;캐싱(게임 중간에 로딩으로 인한 성능 저하 없음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;플레이어 및 몬스터
    &lt;ul&gt;
      &lt;li&gt;원본 게임과 흡사한 움직임&lt;/li&gt;
      &lt;li&gt;몬스터 AI&lt;/li&gt;
      &lt;li&gt;FPS에 영향 받지 않는 애니메이션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤
    &lt;ul&gt;
      &lt;li&gt;이동, 점프, 엎드리기 : 히트박스의 변화&lt;/li&gt;
      &lt;li&gt;스킬 : 일정시간 적의 공격을 회피&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 지속시간 내 재사용 시 취소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;옵션
    &lt;ul&gt;
      &lt;li&gt;마우스로 선택하거나 Esc키로 옵션창 선택&lt;/li&gt;
      &lt;li&gt;FPS 제한 수치 선택(60/144)&lt;/li&gt;
      &lt;li&gt;UI 투명도 조절&lt;/li&gt;
      &lt;li&gt;스킬 쿨타임 알림이 스타일 변경(Classic, Alpha Lerp)&lt;/li&gt;
      &lt;li&gt;적용, 취소 버튼&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI 및 애니메이션 효과
    &lt;ul&gt;
      &lt;li&gt;체력바 : 수치의 변동량이 클 수록 빠르게 변화&lt;/li&gt;
      &lt;li&gt;체력이 다 하면 페이드 아웃과 함께 게임오버 문구 표시&lt;/li&gt;
      &lt;li&gt;재도전, 종료 선택&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기술-및-코드&quot;&gt;주요 기술 및 코드&lt;/h1&gt;

&lt;h2 id=&quot;1-상속을-통한-계층적-설계&quot;&gt;1. 상속을 통한 계층적 설계&lt;/h2&gt;
&lt;p&gt;클래스의 주요 속성중 하나로 상속성이 있습니다.&lt;/p&gt;

&lt;p&gt;게임의 다양성을 위해서는 다양한 종류의 몬스터, 맵, 타일 등이 필요할 것입니다. &lt;strong&gt;뼈대가 되는 클래스를 만든 후 하위 클래스들을 설계하면 불필요한 반복 코드를 최소화할 수 있고 코드의 가독성도 훨씬 좋아집니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;본 프로젝트에서는 크게 플레이어, 맵 두 개의 뼈대 클래스가 존재합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;플레이어 클래스는 캐릭터의 행동에 따른 애니메이션 출력, 이동, 물리 등이 들어있습니다. 하위 클래스인 몬스터 클래스에서는 추가적으로 필요한 AI를 정의했습니다.&lt;/li&gt;
  &lt;li&gt;맵 클래스는 맵의 크기, 배경, vector 템플릿에 담긴 타일&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, 충돌정보, 마찰계수 등이 들어있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이하는 클래스 설계의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class CMap
{
public:
	CMap();
	CMap(HWND hWnd, HINSTANCE g_hInst, int width, int height, int theme, double frictionCoefficient, int stage);
	~CMap();

	int GetMapWidth() { return nWidth; }
	int GetMapHeight() { return nHeight; }
	void SetMapResolution(int width, int height);

	void CreateCollision();
	void InitializeCollision();
	int** GetMapCollision() { return nCollision; }
	void SetMapCollision(int** collision);

	double GetFrictionCoefficient() { return dFrictionCoefficient; }
	HBITMAP GetBackgroundBitmap() { return MyStretchedBitmap; }
	BITMAP GetBackgroundInfo() { return BackBit; }
	HDC GetBackgroundDC() { return imgStretchedDC; }

	HBITMAP GetMapBitmap() { return MyMemBitmap; }
	HDC GetMapDC() { return memDC; }

	void DisplayBackground(RECT clientRT);

	void CreateTiles(HWND hWnd, HINSTANCE g_hInst, int stage);
	vector&amp;lt;CTile&amp;gt; GetTileVector() { return vTile; }
	void PrintTiles(RECT clientRT);
	void MakeMapCollision();

private:
	int nBackWidth, nBackHeight;
	int** nCollision;
	double dFrictionCoefficient;
	// 일부 변수 생략
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 전체에서 공통적으로 함수 및 클래스 등은 파스칼 표기법, 매개변수를 제외한 다른 변수는 헝가리안 표기법으로 표기했습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-동기화-및-프레임레이트&quot;&gt;2. 동기화 및 프레임레이트&lt;/h2&gt;
&lt;p&gt;유저들의 컴퓨터 사양은 모두 제각각입니다. &lt;strong&gt;정상적인 연산을 위한 최소사양만 만족한다면 사양의 차이로 인해 게임 플레이에 변화가 생기지 않도록 해야 제대로 설계했다&lt;/strong&gt;고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 10년 된 저가 컴퓨터와 최신, 최고사양의 컴퓨터가 있다고 했을 때 최신 컴퓨터의 CPU 클럭이 더 높아서 초당 더 많은 연산을 해 더 빠르게 움직이면 안 될 것입니다. 따라서 정해진 주기마다 물리 및 출력 연산을 시행하도록 동기화 과정이 필수적입니다.&lt;/p&gt;

&lt;p&gt;프레임레이트의 고정은 정의한 주기에 맞추어 출력을 수행하면 됩니다. 본 작품은 설정에서 60/144Hz를 선택할 수 있도록 했으나, 헤더에서 정의한 값을 수정하면 다른 수치도 가능합니다.&lt;/p&gt;

&lt;p&gt;이하는 동기화 작업 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fCurrentTimeUpdate = (float)timeGetTime();
fCurrentTimeAI = (float)timeGetTime();
fCurrentTimeRender = (float)timeGetTime();
fCurrentTimeCamera = (float)timeGetTime();

fDeltaTimeUpdate = (fCurrentTimeUpdate - fStartTimeUpdate) * 0.001f; // ms단위 값
fDeltaTimeAI = (fCurrentTimeAI - fStartTimeAI) * 0.001f; // ms단위 값
fDeltaTimeRender = (fCurrentTimeRender - fStartTimeRender) * 0.001f; // ms단위 값
fDeltaTimeCamera = (fCurrentTimeCamera - fStartTimeCamera) * 0.001f; // ms단위 값

// Update
if (fDeltaTimeUpdate &amp;gt;= __UPDATE_PERIOD__)
{
	Update(hWnd);
	fStartTimeUpdate = fCurrentTimeUpdate;
}

// AI
if (fDeltaTimeAI &amp;gt;= __AISTATE_CHANGE_INTERVAL__)
{
	for (int i = 0; i &amp;lt; vMonsters.size(); i++)
		vMonsters[i].ChangeAIState();
	fStartTimeAI = fCurrentTimeAI;
}

// Render
if (fDeltaTimeRender &amp;gt;= __FPS__(player-&amp;gt;GetDesiredFPS()))
{
	Render(hWnd);
	nFrameCount++;

	fTimeElapsed += fDeltaTimeRender;
	fStartTimeRender = fCurrentTimeRender;

	if (fTimeElapsed &amp;gt;= 1.0f) // FPS Update
	{
		nFrameLatest = nFrameCount;
		nFrameCount = 0;
		fTimeElapsed = 0;
	}
}

// Camera
if (fDeltaTimeCamera &amp;gt;= __CAM_PERIOD__)
{
	player-&amp;gt;UpdateCameraOffset(currentMap);
	fStartTimeCamera = fCurrentTimeCamera;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;본 작품에서는 2ms마다 물리연산을 수행하도록 설계&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;했기 때문에 최소사양 기준은 이 물리연산이 딜레이 없이 수행되는 것입니다.&lt;/p&gt;

&lt;p&gt;물리연산에 해당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update()&lt;/code&gt;는 다행히 오버헤드가 크지 않기 때문에 최소사양은 높지 않습니다. 정의한 프레임레이트에 따라 화면을 더블버퍼링으로 출력하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render()&lt;/code&gt;는 오버헤드가 크기 때문에 프레임제한을 해제하면 CPU의 성능을 최대치로 활용하게 됩니다.&lt;/p&gt;

&lt;p&gt;많은 테스트와 최적화를 거듭해 프레임 제한 해제 시 약 800FPS까지 동작합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-물리&quot;&gt;3. 물리&lt;/h2&gt;
&lt;p&gt;프로젝트의 디테일을 높이기 위해 많은 고민을 했고, 단순히 원본 게임의 모작을 만드는 것을 넘어 시뮬레이터에 가깝도록 원본과 유사하게 만드는 것을 목표로 작업했습니다. 물리는 그 작업의 일환으로, &lt;strong&gt;원본 게임인 메이플스토리의 물리를 최대한 모사&lt;/strong&gt;했습니다.&lt;/p&gt;

&lt;p&gt;메이플스토리를 플레이 해보신 분들은 알겠지만, 플레이어와 몬스터 등의 개체는 등속운동을 하지 않습니다. 정지상태에서 최대속도에 도달할 때까지 가속합니다. 멈출 때도 갑자기 제자리에 우뚝 서면 어색하므로 서서히 감속합니다.&lt;/p&gt;

&lt;p&gt;점프도 마찬가지로 가속 및 감속하며, 본 프로젝트에서는 2차함수로 설계했습니다.&lt;/p&gt;

&lt;p&gt;또한 맵의 테마에 따라 얼음장판과 같은 바닥이 미끄러운 환경도 존재합니다. 맵을 생성할 때 마찰계수를 선언할 수 있으며, 계수가 낮으면 천천히 감속하게 됩니다.&lt;/p&gt;

&lt;p&gt;이하는 키를 누르지 않았을 때 천천히 감속하는 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (!GetAsyncKeyState(VK_LEFT) &amp;amp;&amp;amp; !GetAsyncKeyState(VK_RIGHT))
{
	if (dCharacterCurrentSpeed &amp;gt; 0)
	{
		if (nCharacterState == __JUMP__)
			dCharacterCurrentSpeed -= dCharacterAcceleration * __JUMP_SLOW_FACTOR__;
		else
			dCharacterCurrentSpeed -= dCharacterAcceleration * map-&amp;gt;GetFrictionCoefficient();

		dMoveCount += dCharacterCurrentSpeed;

		if (nCharacterDirection == __LEFT__)
		{
			while (dMoveCount &amp;gt;= __MOVECOUNT_THRESHOLD__)
			{
				dMoveCount -= __MOVECOUNT_THRESHOLD__;
				if (rRigidBody.left &amp;gt; 0)
				{
					rRigidBody.left--;
					rRigidBody.right--;
					UpdateCoordinate();
				}
			}
		}
		else if (nCharacterDirection == __RIGHT__)
		{
			while (dMoveCount &amp;gt;= __MOVECOUNT_THRESHOLD__)
			{
				dMoveCount -= __MOVECOUNT_THRESHOLD__;
				if (rRigidBody.right &amp;lt; map-&amp;gt;GetMapWidth())
				{
					rRigidBody.left++;
					rRigidBody.right++;
					UpdateCoordinate();
				}
			}
		}
	}
	else
	{
		dCharacterCurrentSpeed = 0;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map-&amp;gt;GetFrictionCoefficient()&lt;/code&gt;로 현재 맵의 마찰 계수를 반환받아 사용합니다. 공중에선 공기저항만 존재하고 바닥의 마찰은 영향받지 않으므로 마찰계수를 적용하지 않습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-연출&quot;&gt;4. 연출&lt;/h2&gt;
&lt;p&gt;물리와 마찬가지로 프로젝트의 완성도를 위해 &lt;strong&gt;메이플스토리의 연출을 모사&lt;/strong&gt;했습니다.&lt;/p&gt;

&lt;p&gt;연출은 크게 카메라워크, 시차, 피격 연출로 나뉩니다.&lt;/p&gt;

&lt;h3 id=&quot;4-1-카메라워크-보간법&quot;&gt;4-1. 카메라워크 보간법&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211263&amp;amp;authkey=%21AAJKQjjHVyzmFOI&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;Camwork&quot; /&gt;
(gif 로딩에 문제가 있어 정적인 이미지로 대체합니다. 영상을 참조해 주세요.)&lt;/p&gt;

&lt;p&gt;게임을 영화에 비유해보겠습니다. 카메라는 주인공인 플레이어에 포커스를 맞춰 촬영하고, 이 촬영의 결과가 유저가 보는 화면입니다. 피사체가 움직이면 카메라도 그에 맞춰 움직이지만, 기계처럼 완벽하게 따라갈 수는 없으며 필연적인 딜레이가 생기게 됩니다.&lt;/p&gt;

&lt;p&gt;물론 게임은 수GHz의 성능을 가진 카메라, 즉 CPU가 있기 때문에 플레이어가 아무리 빠르게 움직여도 중심에서 벗어나는 일은 없습니다. 하지만 메이플스토리는 자연스러운 연출을 위해 의도적으로 딜레이를 만들었으며, 딜레이도 동일하지 않고, 플레이어와 카메라의 거리가 멀 수록 더 빠르게 따라갑니다.
 예를 들어 플레이어가 순간이동하여 좌표가 순식간에 변경되면, 카메라는 매우 빠른 속도로 플레이어를 쫓아가지만, 가까이 도달하면 점점 그 속도가 느려집니다. 저는 이를 카메라 보간이라고 부르며, 본 작품에도 동일하게 연출하는데 성공했습니다.&lt;/p&gt;

&lt;p&gt;카메라 보간법 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void CUnit::UpdateCameraOffset(CMap* map)
{
	// 항상 거리차의 1/n만큼 보간, n은 define에서 정의
	/*
	bufferRT.left, bufferRT.top : 함수가 호출되는 시점에서 카메라 좌표가 도달해야 하는 최종 지점 (__CAMSPEED__가 1이면 1번에 도달할 것)
	nCameraX, nCameraY : 현재 카메라 좌표.
	*/

	double dx = pow(abs(nCoorX - nCameraX), 2);
	double dy = pow(abs(nCoorY - nCameraY), 2);
	double dStep = sqrt(dx + dy) / __CAM_SPEED__;
	if (dStep &amp;lt; __CAMCOUNT_LOWERLIMIT__)
		dCamCount += __CAMCOUNT_LOWERLIMIT__;
	else
		dCamCount += dStep; // 거리차가 멀 수록 Count값이 더 빠르게 올라감 (더 많이, 자주 카메라 워크 실시)

	while (dCamCount &amp;gt;= __CAMCOUNT_THRESHOLD__)
	{
		dCamCount -= __CAMCOUNT_THRESHOLD__;
		if (nCoorX &amp;gt; nCameraX) // 목표 지점이 더 오른쪽
		{
			if ((nCoorX - nCameraX) / __CAM_SPEED__ &amp;lt; 1.0)
				nCameraX++;
			else
				nCameraX += (nCoorX - nCameraX) / __CAM_SPEED__;
		}
		else if (nCoorX &amp;lt; nCameraX)
		{
			if ((nCameraX - nCoorX) / __CAM_SPEED__ &amp;lt; 1.0)
				nCameraX--;
			else
				nCameraX -= (nCameraX - nCoorX) / __CAM_SPEED__;
		}

		if (nCoorY &amp;gt; nCameraY)
		{
			if ((nCoorY - nCameraY) / __CAM_SPEED__ &amp;lt; 1.0)
				nCameraY++;
			else
				nCameraY += (nCoorY - nCameraY) / __CAM_SPEED__;
		}
		else if (nCoorY &amp;lt; nCameraY)
		{
			if ((nCameraY - nCoorY) / __CAM_SPEED__ &amp;lt; 1.0)
				nCameraY--;
			else
				nCameraY -= (nCameraY - nCoorY) / __CAM_SPEED__;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-2-시차parallax&quot;&gt;4-2. 시차(Parallax)&lt;/h3&gt;
&lt;p&gt;쉽게 놓칠 수 있는 부분이지만, 메이플스토리를 플레이하면 뒷배경에서 원근감을 느낄 수 있습니다.&lt;/p&gt;

&lt;p&gt;약간 멀리 있는듯한 느낌을 주기 위해 피사계 심도(Depth of Field)가 적용되어 뿌연 느낌이 들고, 사막에서 플레이어가 맵의 처음부터 끝까지 이동해도 배경의 피라미드는 거의 움직이지 않은 것처럼 보입니다.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;시차의 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void CMap::DisplayBackground(RECT clientRT)
{
	// 적당한 크기만큼 늘려진 배경 (nBackWidth, nBackHeight)의 &apos;시작 좌표&apos;를 비율에 맞추어 정하고, 클라이언트 영역만큼을 출력
	int nGapWidth = abs(nWidth - nBackWidth);
	int nGapHeight = abs(nHeight - nBackHeight);
	BitBlt(memDC, clientRT.left, clientRT.top, __PROGRAM_WIDTH__, __PROGRAM_HEIGHT__, imgStretchedDC, clientRT.left*nGapWidth/nWidth, clientRT.top*nGapHeight/nHeight, SRCCOPY);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기술적인 부분으로, 시차를 구현하기 위해서는 먼저 게임 스크린의 해상도와 현재 맵의 크기, 배경화면의 크기를 알아야 합니다.&lt;/p&gt;

&lt;p&gt;만약 해상도가 맵의 크기보다 크다면 맵의 전체를 출력하고도 공간이 남기 때문에 가장자리가 잘리고, 반대로 맵이 더 크다면 스크린은 맵의 일부만을 출력하게 됩니다.&lt;/p&gt;

&lt;p&gt;배경의 크기가 맵과 동일하면 전혀 입체감을 느낄 수 없습니다. 따라서 시차를 구현하기 위한 배경 크기의 필요조건은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;해상도 &amp;lt; 배경의 크기 &amp;lt; 맵의 크기&lt;/code&gt;이며, 가장 이상적인 수치는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( 해상도 + 맵의 크기 ) / 2&lt;/code&gt;입니다. 본 작품에서는 사전작업으로 배경을 이 수치로 맞춥니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-3-피격-효과&quot;&gt;4-3. 피격 효과&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211261&amp;amp;authkey=%21AJ39kUEw6Qh5nGo&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;Hit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원본 게임에서 플레이어가 몬스터의 ‘몸통 박치기’를 맞게 되면 아파하는 표정과 함께 반대방향으로 튕겨나가며, 깜박이는 묘사와 함께 일정시간동안 무적이 됩니다.&lt;/p&gt;

&lt;p&gt;이를 모사한 구현 과정입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL CUnit::Collide(CUnit target)
{
	if (bInvincible || bSkillDarkSight) // 무적 상태, 다크사이트 상태에서는 충돌처리 X
		return FALSE;
	if ((rRigidBody.top &amp;lt;= target.rRigidBody.bottom &amp;amp;&amp;amp; rRigidBody.bottom &amp;gt;= target.rRigidBody.bottom) || (rRigidBody.top &amp;lt;= target.rRigidBody.top &amp;amp;&amp;amp; rRigidBody.bottom &amp;gt;= target.rRigidBody.top))
	{
		// Player collides with the target from the leftside
		if (rRigidBody.right &amp;gt; target.rRigidBody.left &amp;amp;&amp;amp; rRigidBody.right &amp;lt; target.rRigidBody.right)
		{
			dCharacterCurrentSpeed = dCharacterSpeed;
			dCurrentForce -= __COLLISION_FORCE__;
			bInvincible = true;
			bOuch = true;
			bHitGround = false;
			nCurrentHp -= target.nATK;
			return TRUE;
		}
		// Vice Versa
		else if (rRigidBody.left &amp;lt; target.rRigidBody.right &amp;amp;&amp;amp; rRigidBody.left &amp;gt; target.rRigidBody.left)
		{
			dCharacterCurrentSpeed = dCharacterSpeed;
			dCurrentForce += __COLLISION_FORCE__;
			bInvincible = true;
			bOuch = true;
			bHitGround = false;
			nCurrentHp -= target.nATK;
			return TRUE;
		}
	}
}

void CUnit::Force(CMap* map)
{
	if (dCurrentForce != 0)
	{
		if (dCurrentForce &amp;lt; 0) // 음수.  dCurrentForce가 0으로 수렴할 때까지 왼쪽으로 밀려남
		{
			if (dCurrentForce + dCharacterAcceleration * map-&amp;gt;GetFrictionCoefficient() &amp;gt; 0)
				dCurrentForce = 0;
			else
				dCurrentForce += dCharacterAcceleration * map-&amp;gt;GetFrictionCoefficient();
			dForceCount += abs(dCurrentForce);

			if (dForceCount &amp;gt;= __MOVECOUNT_THRESHOLD__)
			{
				dForceCount -= __MOVECOUNT_THRESHOLD__;
				if (rRigidBody.left &amp;gt; 0)
				{
					rRigidBody.left--;
					rRigidBody.right--;
				}
				if (!bHitGround)
				{
					rRigidBody.top -= __JUMP_COLLISION_CHECK_ACCURACY__;
					rRigidBody.bottom -= __JUMP_COLLISION_CHECK_ACCURACY__;
				}
				UpdateCoordinate();
			}
		}
		else if (dCurrentForce &amp;gt; 0) // 양수.  dCurrentForce가 0으로 수렴할 때까지 오른쪽으로 밀려남
		{
			if (dCurrentForce - dCharacterAcceleration * map-&amp;gt;GetFrictionCoefficient() &amp;lt; 0)
				dCurrentForce = 0;
			else
				dCurrentForce -= dCharacterAcceleration * map-&amp;gt;GetFrictionCoefficient();
			dForceCount += dCurrentForce;

			if (dForceCount &amp;gt;= __MOVECOUNT_THRESHOLD__)
			{
				dForceCount -= __MOVECOUNT_THRESHOLD__;
				if (rRigidBody.right &amp;lt; map-&amp;gt;GetMapWidth())
				{
					rRigidBody.left++;
					rRigidBody.right++;
				}
				if (!bHitGround)
				{
					rRigidBody.top -= __JUMP_COLLISION_CHECK_ACCURACY__;
					rRigidBody.bottom -= __JUMP_COLLISION_CHECK_ACCURACY__;
				}
				UpdateCoordinate();
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;플레이어가 충돌 범위 안에 들어왔을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__COLLISION_FORCE__&lt;/code&gt;만큼의 충격량을 받습니다. 부호에 따라 방향에 차이가 생깁니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-최적화&quot;&gt;5. 최적화&lt;/h2&gt;
&lt;p&gt;게임 리뷰들을 보면 훌륭한 게임성과 작품성으로 칭찬받지만, 고사양 PC로도 원활한 플레이를 할 수 없어 평가점수가 깎이는 경우를 종종 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이처럼 &lt;strong&gt;좋은 게임의 이면에는 반드시 어느정도의 최적화가 필요합니다.&lt;/strong&gt; 본 프로젝트는 고성능의 PC를 요구하는 작업을 하진 않지만, 그렇다고 최적화를 소홀히 할 순 없습니다. 기능이 추가되어 고사양이 될 수도 있고, 다른 게임을 만들 때 고사양을 요하는 작업이 포함될 수도 있으니까요.&lt;/p&gt;

&lt;h3 id=&quot;5-1-컬링culling&quot;&gt;5-1. 컬링(Culling)&lt;/h3&gt;
&lt;p&gt;자주 쓰이는 최적화 방법 중 하나입니다. 카메라의 범위를 벗어나거나 다른 오브젝트에 가려져서 보이지 않는 부분은 출력할 필요가 없기 때문에 출력할 필요가 없습니다.
 다만 보이지 않는 상태에서도 움직이는 등의 활동은 계속해야 하므로 물리연산은 계속 실시합니다.&lt;/p&gt;

&lt;p&gt;컬링 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void Render(HWND hWnd)
{
	hdc = GetDC(hWnd);
	clientRT = player-&amp;gt;GetClientRegion(currentMap);

	/* Background */
	currentMap-&amp;gt;DisplayBackground(clientRT);

	/* Tiles */
	currentMap-&amp;gt;PrintTiles(clientRT);

	/* Monsters */
	for (int i = 0; i &amp;lt; vMonsters.size(); i++)
		vMonsters[i].DisplayCharacter(memDC, clientRT);

	/* Characters&amp;amp; tiles */ 
	player-&amp;gt;DisplayCharacter(memDC, clientRT);

	/* Foreground */
	// 생략

	/* UI */
	// 생략
	
	DoubleBuffer(hWnd, memDC);

	ReleaseDC(hWnd, hdc);
}

void CUnit::DisplayCharacter(HDC memDC, RECT clientRT)
{
	if (rRigidBody.left &amp;gt; clientRT.right ||
		rRigidBody.right &amp;lt; clientRT.left ||
		rRigidBody.top &amp;gt; clientRT.bottom ||
		rRigidBody.bottom &amp;lt; clientRT.top)return;
	
	// 개체 출력 과정 생략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetClientRegion(currentMap)&lt;/code&gt;으로 현재 맵에서 카메라가 촬영하고 있는 해상도만큼의 범위를 반환받고, 오브젝트가 이 범위 밖에 있다면 출력 과정을 생략합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-2-blt-선택&quot;&gt;5-2. Blt 선택&lt;/h3&gt;
&lt;p&gt;먼저 Windows API에서 이미지를 출력하는 방법 몇 가지를 간략하게 설명하겠습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;BitBlt : 가장 기본적인 방법으로, DC&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;에 담긴 정보를 원하는 좌표에 그대로 출력합니다.&lt;/li&gt;
  &lt;li&gt;TransparentBlt : 매개변수로 입력한 ‘마스크’에 해당하는 색은 출력하지 않고 나머지만 출력합니다.&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;StretchBlt : 원본 DC를 매개변수로 입력한 크기에 맞게 축소하거나 늘려서 출력합니다. 뒤집어서 출력하는 것도 가능합니다.&lt;/li&gt;
  &lt;li&gt;AlphaBlend : DC에는 기본적으로 bmp포맷이 들어가기 때문에 png에 있는 투명도(A)가 없습니다. 해당 기능을 사용하면 bmp에 투명도를 적용할 수 있습니다.
각 방법들은 조합하여 사용할 수 있습니다. 예를 들어 반투명한 늘려진 이미지를 만드는 것도 가능합니다. (단, 정해진 순서로 연산해야 어색하지 않습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;당연히 BitBlt의 오버헤드가 가장 적으며, 이외의 방식은 연산량이 많습니다.
 맵에서 플레이어가 딛는 바닥의 밑에 해당하는 타일들은 이미지의 모든 부분을 사용하기 때문에 TransparentBlt를 사용할 필요가 없습니다.
 최적화를 위해서는 가급적 BitBlt를 사용하는 것이 바람직하며, 이렇게 최적화 완료 후 최적화 전 대비 약 30%(600대 -&amp;gt; 800대)&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;의 프레임 향상을 확인했습니다.&lt;/p&gt;

&lt;p&gt;이하는 경우에 따라 Blt를 선택한 코드의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void CMap::PrintTiles(RECT clientRT)
{
	for (int i = 0; i &amp;lt; vTile.size(); i++)
	{
		if (vTile[i].GetCoordinateX() &amp;gt; clientRT.right || vTile[i].GetCoordinateX() + vTile[i].GetWidth() &amp;lt; clientRT.left || vTile[i].GetCoordinateY() &amp;gt; clientRT.bottom || vTile[i].GetCoordinateY() + vTile[i].GetHeight() &amp;lt; clientRT.top)continue;
		TransparentBlt(memDC, vTile[i].GetCoordinateX(), vTile[i].GetCoordinateY(), vTile[i].GetWidth(), vTile[i].GetHeight(), vTile[i].GetTileDC(), 0, 0, vTile[i].GetWidth(), vTile[i].GetHeight(), vTile[i].GetColorKey());
	}
	for (int i = 0; i &amp;lt; vTileBed.size(); i++)
	{
		if (vTileBed[i].GetCoordinateX() &amp;gt; clientRT.right || vTileBed[i].GetCoordinateX() + vTileBed[i].GetWidth() &amp;lt; clientRT.left || vTileBed[i].GetCoordinateY() &amp;gt; clientRT.bottom || vTileBed[i].GetCoordinateY() + vTileBed[i].GetHeight() &amp;lt; clientRT.top)continue;
		BitBlt(memDC, vTileBed[i].GetCoordinateX(), vTileBed[i].GetCoordinateY(), vTileBed[i].GetWidth(), vTileBed[i].GetHeight(), vTileBed[i].GetTileDC(), 0, 0, SRCCOPY);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;모든 소스는 직사각형 비트맵 이미지이기 때문에 플레이어등의 개체가 발을 딛는 표면은 투명처리가 불가피합니다. 반대로 그 밑에 해당하는 부분은 따로 vTileBed에 저장되어 있으며 BitBlt로 출력해 오버헤드를 최소화합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-3-캐싱caching&quot;&gt;5-3. 캐싱(Caching)&lt;/h3&gt;
&lt;p&gt;게임 시작 시 맵에서 사용될 모든 개체들을 미리 메모리에 동적할당합니다. 해당 맵을 벗어나면 더이상 필요하지 않기 때문에 해제합니다. 똑같은 몬스터 개체가 다음 맵에도 등장하면 다시 생성하지 않고 재활용합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-옵션-및-스킬-알림이&quot;&gt;6. 옵션 및 스킬 알림이&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211262&amp;amp;authkey=%21ALkxG2nIar1On1E&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;Option&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;옵션&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;심플한 옵션창을 설계했습니다. 설정 버튼을 클릭하거나 Esc키를 누르면 옵션창이 열리며, OK를 눌러 적용, Cancel이나 Esc키로 취소합니다.
 옵션창을 여는 순간의 기존 설정을 임시로 저장해서 유저가 값을 변경해도 취소를 누르면 저장된 값으로 롤백됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스킬 알림이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스킬 사용 후 지속시간 안에 다시 스킬을 사용하거나 지속시간이 종료되면 쿨타임이 흐르기 시작합니다. 두 개의 쿨타임 표시 스타일을 제작해 보았습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Classic : 원본 게임의 스타일과 같습니다. 쿨타임이 적용되면 아이콘이 어두워지며 어두운 부분이 점점 사라집니다.&lt;/li&gt;
  &lt;li&gt;Alpha Lerp : 쿨타임이 적용되면 아이콘이 어두워지며 점점 밝아집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구현 코드의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void CUnit::UIOptionDisplay(HDC memDC, RECT clientRT)
{
	if (!bUIOption)
		return;
	int nScreenLeft = clientRT.left + __PROGRAM_WIDTH__ / 2 - UIOptionBitmap.bmWidth / 2;
	int nScreenTop = clientRT.top + __PROGRAM_HEIGHT__ / 2 - UIOptionBitmap.bmHeight / 2;

	// Option Screen
	BitBlt(memDC,
		nScreenLeft,
		nScreenTop,
		UIOptionBitmap.bmWidth,
		UIOptionBitmap.bmHeight,
		UIOptionDC,
		0, 0, SRCCOPY);

	// Boxes
	/*
	Classic : 86, 76
	Alpha Lerp : 176, 76

	60 : 86, 126
	144 : 176, 126
	*/
	if (nSkillCooldownPrintStyle == __CLASSIC__)
	{
		BitBlt(memDC, nScreenLeft + 86, nScreenTop + 76, UIOptionBoxOnBitmap.bmWidth, UIOptionBoxOnBitmap.bmHeight, UIOptionBoxOnDC, 0, 0, SRCCOPY);
		BitBlt(memDC, nScreenLeft + 176, nScreenTop + 76, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
	}
	else if (nSkillCooldownPrintStyle == __ALPHA_LERP__)
	{
		BitBlt(memDC, nScreenLeft + 176, nScreenTop + 76, UIOptionBoxOnBitmap.bmWidth, UIOptionBoxOnBitmap.bmHeight, UIOptionBoxOnDC, 0, 0, SRCCOPY);
		BitBlt(memDC, nScreenLeft + 86, nScreenTop + 76, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
	}

	if (nDesiredFPS == 60)
	{
		BitBlt(memDC, nScreenLeft + 86, nScreenTop + 126, UIOptionBoxOnBitmap.bmWidth, UIOptionBoxOnBitmap.bmHeight, UIOptionBoxOnDC, 0, 0, SRCCOPY);
		BitBlt(memDC, nScreenLeft + 176, nScreenTop + 126, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
	}
	else if (nDesiredFPS == 144)
	{
		BitBlt(memDC, nScreenLeft + 176, nScreenTop + 126, UIOptionBoxOnBitmap.bmWidth, UIOptionBoxOnBitmap.bmHeight, UIOptionBoxOnDC, 0, 0, SRCCOPY);
		BitBlt(memDC, nScreenLeft + 86, nScreenTop + 126, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
	}
	else // define.h에서 값을 60, 144 외 임의의 값으로 정해놨을 경우
	{
		BitBlt(memDC, nScreenLeft + 86, nScreenTop + 126, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
		BitBlt(memDC, nScreenLeft + 176, nScreenTop + 126, UIOptionBoxOffBitmap.bmWidth, UIOptionBoxOffBitmap.bmHeight, UIOptionBoxOffDC, 0, 0, SRCCOPY);
	}

	// Scroll
	/*
	Min : 88, 35
	Max : 262, 35
	Gap : 174
	Transparency : 255 -&amp;gt; 262
	Transparency : 0 -&amp;gt; 88
	*/

	TransparentBlt(memDC, nScreenLeft + 88 + (double)nUITransparency/255*174, nScreenTop + 35, UIOptionScrollBitmap.bmWidth, UIOptionScrollBitmap.bmHeight, UIOptionScrollDC, 0, 0, UIOptionScrollBitmap.bmWidth, UIOptionScrollBitmap.bmHeight, colorKey);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;옵션에서 해당하는 부분이 활성화된 경우 아이콘을 체크 표시로 바꿔주고, 스크롤의 커서도 현재 설정된 값에 맞게 보정합니다.
&lt;br /&gt;&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;메이플스토리 도적 직업군의 스킬 ‘다크 사이트’와 동일합니다. 연출도 똑같이 반투명해집니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;타일은 발판 생성의 편리함을 위해 별도로 타일 클래스를 설계했습니다. 각각의 맵은 vector&lt;vTile&gt;로 구성된 타일 집합을 가집니다.&lt;/vTile&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;가속, 감속 등을 부드럽게 연출하기 위해서는 높은 클럭이 필수적입니다. 즉 사양의 제한만 없다면 최소 단위가 작을 수록 좋습니다. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;실생활을 예로 들면 잠실의 롯데타워는 서울이 아닌 경기권에서도 보이는데, 서울 방향으로 10분 정도 운전해도 비슷한 위치에 비슷한 크기로 있는 것을 알 수 있습니다. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Device Context. Windows API에서 이미지를 입력받아 이를 저장해 두는 영역입니다. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;CG를 사용하는 영화의 촬영장면을 보면 뒷배경으로 녹색 천을 사용하는 것을 보신 적이 있을 겁니다. 후처리 작업 때 이 배경을 제거하고 컴퓨터그래픽을 입히는데, 주로 자연에 흔하게 존재하지 않는 색을 이 배경색으로 채택합니다. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;프레임제한을 해제해 최대한 많은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render()&lt;/code&gt;를 수행했을 경우입니다. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>이윤찬</name></author><category term="Windows API" /><category term="C++" /><category term="Game Project" /><summary type="html">소개</summary></entry><entry><title type="html">The Senator</title><link href="http://localhost:4000/the-senator" rel="alternate" type="text/html" title="The Senator" /><published>2023-04-01T00:00:00+09:00</published><updated>2023-04-01T00:00:00+09:00</updated><id>http://localhost:4000/The-Senator</id><content type="html" xml:base="http://localhost:4000/the-senator">&lt;h1 id=&quot;소개&quot;&gt;소개&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;제작 언어 및 엔진&lt;/strong&gt; : C#, Unity Engine HDRP&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제작 기간&lt;/strong&gt; : 약 2개월&lt;/p&gt;

&lt;p&gt;코지마 프로덕션의 메탈기어 라이징 리벤전스를 모티브로 하여 만든 1vs1 액션 게임으로, &lt;strong&gt;플레이어의 컨트롤 요소를 극대화&lt;/strong&gt;하고, 각종 효과로 &lt;strong&gt;시각적 만족도&lt;/strong&gt;를 높이는데 중점을 두었습니다.&lt;/p&gt;

&lt;h1 id=&quot;플레이-영상&quot;&gt;플레이 영상&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/wEmL8iSdcy0?si=dCgajaNZnW4heORk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;ul&gt;
  &lt;li&gt;주요 타임 스탬프
    &lt;ul&gt;
      &lt;li&gt;00:05 : 대화 컷씬&lt;/li&gt;
      &lt;li&gt;00:22 : 기본 조작&lt;/li&gt;
      &lt;li&gt;00:48 : 특수 패턴 1&lt;/li&gt;
      &lt;li&gt;01:03 : 패링&lt;/li&gt;
      &lt;li&gt;01:15 : 옵션 - 스탯 분배&lt;/li&gt;
      &lt;li&gt;01:27 : 옵션 - 난이도&lt;/li&gt;
      &lt;li&gt;01:49 : 옵션 - 그래픽&lt;/li&gt;
      &lt;li&gt;02:10 : 2페이즈 진입&lt;/li&gt;
      &lt;li&gt;02:24 : 특수 패턴 1 강화&lt;/li&gt;
      &lt;li&gt;02:32 : 특수 패턴 2&lt;/li&gt;
      &lt;li&gt;02:43 : 특수 패턴 2 방어&lt;/li&gt;
      &lt;li&gt;02:48 : QTE 성공&lt;/li&gt;
      &lt;li&gt;03:18 : QTE 실패&lt;/li&gt;
      &lt;li&gt;04:18 : 마지막 QTE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;메인화면, 대화 컷씬, 전투로 나뉜 구성&lt;/li&gt;
  &lt;li&gt;QTE&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;컨트롤 요소
    &lt;ul&gt;
      &lt;li&gt;방어 및 패링 : 적절한 타이밍에 방어하면 적을 잠시 경직시키며, 스킬 사용에 필요한 MP를 회복&lt;/li&gt;
      &lt;li&gt;점프 및 구르기 : 적의 특정 공격을 회피, 늦은 타이밍에 사용해 피격 시 넘어지는 등의 패널티 요소&lt;/li&gt;
      &lt;li&gt;무기 : 검, 활 등을 원하는 대로 선택해 자신만의 스타일로 전투&lt;/li&gt;
      &lt;li&gt;스킬 : MP를 소모하고 딜레이가 큰 대신, 큰 데미지를 줄 수 있음, 쿨타임 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연출
    &lt;ul&gt;
      &lt;li&gt;패링 성공 및 QTE 도중 시간이 느려지고, 화면에 뿌옇게 되는 등의 효과&lt;/li&gt;
      &lt;li&gt;타격 성공 및 피격 시 해당 위치에 이펙트 발생 및 카메라 흔들림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;난이도 및 페이즈 시스템
    &lt;ul&gt;
      &lt;li&gt;체력, 데미지 뿐만 아니라 패턴 강화, QTE난이도 강화 등의 다양한 요소를 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스탯 분배 시스템
    &lt;ul&gt;
      &lt;li&gt;초기 및 중간에 지급되는 골드로 원하는 스탯에 분배해 자신만의 빌드로 전투&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;편의성 및 그래픽 설정
    &lt;ul&gt;
      &lt;li&gt;락 온 시스템으로 편한 조준 가능&lt;/li&gt;
      &lt;li&gt;게임 시작 시 안내 문구로 간단한 조작법 설명&lt;/li&gt;
      &lt;li&gt;Ambient Occulsion, Vignette, Depth of Field 등의 그래픽 효과 조작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI 및 애니메이션
    &lt;ul&gt;
      &lt;li&gt;플레이어의 초상화, HP/MP 체력바, 각종 스탯 수치, 스킬 쿨타임 표시&lt;/li&gt;
      &lt;li&gt;체력의 변동이나 쿨타임 등을 천천히 변화하도록 애니메이션화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최적화
    &lt;ul&gt;
      &lt;li&gt;여러 번 사용되는 개체는 오브젝트 풀링으로 오버헤드 최소화&lt;/li&gt;
      &lt;li&gt;불필요한 충돌 처리 최소화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;주요-기술-및-코드&quot;&gt;주요 기술 및 코드&lt;/h1&gt;

&lt;h2 id=&quot;1-qte&quot;&gt;1. QTE&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211258&amp;amp;authkey=%21ACquolHj7F2mqsI&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;QTE1&quot; /&gt;
&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211259&amp;amp;authkey=%21AJuikicZ6exUY7Y&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;QTE2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;게임을 클리어하기 위해서는 QTE를 연달아 성공해야 합니다.&lt;/p&gt;

&lt;p&gt;QTE에서 등장할 아이콘, 시간 안에 누르기 위해 점점 좁아지는 원 및 관련 기능을 하나의 클래스에 구현했습니다.&lt;/p&gt;

&lt;p&gt;원이 아이콘의 크기와 같아지기 전에 지시된 키를 누르면 QTE 성공, 잘못된 키를 누르거나 시간 안에 누르지 못하면 실패처리됩니다.&lt;/p&gt;

&lt;p&gt;우선 Dictionary로 등장할 키를 매핑해 두고, 난이도에 따라 누르기 까다로운 위치의 키(왼손 주변에 위치한 키가 누르기 편할 것입니다.)는 제외하는 등의 처리를 해줍니다.&lt;/p&gt;

&lt;p&gt;이하는 일정한 속도로 좁아지는 원을 Coroutine으로 구현한 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IEnumerator QTECircle(float speed)
{
    qteLimit.GetComponent&amp;lt;RectTransform&amp;gt;().localScale = new Vector3(3, 3, 1);
    int rnd;
    if (PlayerAxis.Instance.difficulty != PlayerAxis.Difficulty.senator)
    {
        rnd = GetRandomNumberExcluded(); // 누르기 까다로운 위치의 키는 제외 (Easy ~ Hard)
        key = (char)rnd;
    }
    else // Senator 난이도는 모든 키가 QTE 이벤트에서 등장
    {
        rnd = Random.Range(65, 91); // A~Z (Senator)
        key = (char)rnd;
    }
    if(GameObject.Find(&quot;Senator Armstrong&quot;).GetComponent&amp;lt;Enemy_Behave&amp;gt;().qteFirstStage == 3) // 마지막 QTE는 누르기 까다로운 위치로
    {
        rnd = GetRandomNumberExcludedInverse();
        key = (char)rnd;
    }
    qteText.text = key.ToString();
    while(qteLimit.GetComponent&amp;lt;RectTransform&amp;gt;().localScale.x &amp;gt; 1)
    {
        yield return null;
        qteLimit.GetComponent&amp;lt;RectTransform&amp;gt;().localScale -= new Vector3(speed, speed, 0);
        if (Input.anyKeyDown)
        {
            foreach (var dic in keyDictionary)
            {
                if(Input.GetKeyDown(dic.Key) &amp;amp;&amp;amp; dic.Value == key)
                {
                    QTESuccess();
                }
                else if (Input.GetKeyDown(dic.Key) &amp;amp;&amp;amp; dic.Value != key)
                {
                    QTEFail();
                }
            }
        }
    }
    if(qteLimit.GetComponent&amp;lt;RectTransform&amp;gt;().localScale.x &amp;lt;= 1) // 시간 초과
    {
        QTEFail();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;반복문 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while(qteLimit.GetComponent&amp;lt;RectTransform&amp;gt;().localScale.x &amp;gt; 1)&lt;/code&gt; 에서 정의해 놓은 속도로 원의 크기가 줄어듭니다.&lt;/p&gt;

&lt;p&gt;시간 내에 올바르게 수행하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QTESuccess()&lt;/code&gt;로 성공 시의 동작을 행하고, 잘못 누르거나 시간초과가 되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QTEFail()&lt;/code&gt;이 실행됩니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-최적화--오브젝트-풀링&quot;&gt;2. 최적화 : 오브젝트 풀링&lt;/h2&gt;
&lt;p&gt;개체가 많을 경우 생성 및 파괴 시의 오버헤드는 무시하기 힘듭니다.&lt;/p&gt;

&lt;p&gt;한 런타임 내에서 같은 종류의 오브젝트가 여러 번 사용될 경우, &lt;strong&gt;사용된 오브젝트를 비활성화 후 보관한 뒤 다시 필요한 순간에 활성화 및 초기화하여 사용합니다.&lt;/strong&gt; 이를 오브젝트 풀링이라 부릅니다.&lt;/p&gt;

&lt;p&gt;결과적으로 한 런타임에서 한 종류의 오브젝트는 동시에 존재했던 최대치까지만 생성되어 유지됩니다.&lt;/p&gt;

&lt;p&gt;본 프로젝트에는 생성과 파괴가 잦은 모든 오브젝트에 대해 해당 기법을 적용했습니다.&lt;/p&gt;

&lt;p&gt;이하는 오브젝트 풀링을 적용한 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 패링 시 이펙트 효과
void ParryImpact()
{
    // Object Pooling
    float rnd_x = Random.Range(-0.2f, 0.2f);
    float rnd_y = Random.Range(-0.2f, 0.2f);
    for (int i = 0; i &amp;lt; parryEffectPool.Count; i++)
    {
        if (!parryEffectPool[i].activeSelf)
        {
            parryEffectPool[i].SetActive(true);
            parryEffectPool[i].transform.position = parryEffectRegion.transform.position + new Vector3(rnd_x, rnd_y, 0);
            return;
        }
    }
    GameObject obj = Instantiate(parryEffect, parryEffectRegion.transform.position + new Vector3(rnd_x, rnd_y, 0), Quaternion.identity);
    obj.transform.parent = parryEffectParent.transform;
    parryEffectPool.Add(obj);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;반복문 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for (int i = 0; i &amp;lt; parryEffectPool.Count; i++)&lt;/code&gt; 에서 풀링된 오브젝트들 중 비활성화된(현재 사용중이지 않은) 개체를 활성화시킨 후 위치를 초기화 합니다.&lt;/p&gt;

&lt;p&gt;사용가능한 오브젝트가 없으면 새로 생성 후 위치를 초기화 하고, 부모인 ‘풀’에 해당 오브젝트를 자식으로 지정하여 종속시킵니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-최적화--충돌-처리-비활성화&quot;&gt;3. 최적화 : 충돌 처리 비활성화&lt;/h2&gt;
&lt;p&gt;개체의 충돌 연산을 처리하기 위해서는 Collider가 필요하지만 많은 연산이 수행됩니다.&lt;/p&gt;

&lt;p&gt;플레이어, 적, 일부 지형과 장애물 등을 제외한 불필요한 오브젝트들은 &lt;strong&gt;충돌처리를 비활성화함으로써 연산량을 크게 낮출 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;에디터에서 수동적으로 콜라이더를 비활성화할 수도 있지만, 재귀함수를 통해 자동으로 처리해 주는 것이 훨씬 간단하고 바람직한 방법입니다.&lt;/p&gt;

&lt;p&gt;루트 오브젝트에 해당 스크립트를 수행시키면 자식 오브젝트에 대해 재귀적으로 콜라이더를 비활성화 합니다.&lt;/p&gt;

&lt;p&gt;이하는 해당 코드입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void DisableCollider(GameObject obj)
{
    foreach (Transform t in obj.transform)
    {
        if (t.gameObject.HasComponent&amp;lt;MeshCollider&amp;gt;())
            t.gameObject.GetComponent&amp;lt;MeshCollider&amp;gt;().enabled = false;
        DisableCollider(t.gameObject);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;최적화에 해당하진 않으나 플레이어가 바닥에 닿아있는지를 판단하기 위해 바닥 오브젝트에 ‘Terrain’ 태그를 부착하는 것도 재귀적으로 수행했습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-finite-state-machine&quot;&gt;4. Finite State Machine&lt;/h2&gt;
&lt;p&gt;적의 AI를 보다 간편하게 제어하기 위해 상태를 유한 상태 기계로 정의했습니다.&lt;/p&gt;

&lt;p&gt;밸런스 패치 등의 이유로 적의 특정 패턴의 빈도를 변경해야 할 경우, 확률값만 바꿔주면 되기 때문에 &lt;strong&gt;직관적인 제어가 가능&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;p&gt;이하는 해당 구현의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum EnemyState { IDLE, MOVE, ATTACK, SPECIALATTACK }

IEnumerator State()
{
    int rnd = Random.Range(0, 101); // 0~100
    // 15% Taunt 15% Idle(Look) 50% Move 20% SA
    if (!onAttack &amp;amp;&amp;amp; controller.GetComponent&amp;lt;Controller&amp;gt;().cameraState != Controller.State.cutscene)
    {
        if (rnd &amp;lt;= 15 &amp;amp;&amp;amp; state == EnemyState.IDLE)
        {
            Taunt();
        }
        if (rnd &amp;gt; 15 &amp;amp;&amp;amp; rnd &amp;lt;= 30)
        {
            state = EnemyState.IDLE;
        }
        if (rnd &amp;gt; 30 &amp;amp;&amp;amp; rnd &amp;lt;= 80)
        {
            state = EnemyState.MOVE;
        }
        if (rnd &amp;gt; 80)
        {
            state = EnemyState.SPECIALATTACK;
        }
    }
    yield return wait;
    StartCoroutine(State());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;최적화의 일환으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WaitForSeconds wait = new WaitForSeconds(3f)&lt;/code&gt;를 통해 기다리는 시간을 미리 캐싱해 줍니다.&lt;/p&gt;

&lt;p&gt;캐싱해둔 해당 대기시간은 3초이므로 3초마다 정해진 확률에 따라 적의 상태가 변동됩니다.&lt;/p&gt;

&lt;p&gt;공격 및 패턴을 수행중이거나 컷씬 상황에서는 상태가 바뀌면 안 되므로 예외처리를 해줍니다.&lt;/p&gt;

&lt;p&gt;적이 허공에 공격을 하는 일이 없도록 ‘ATTACK’ 상태는 ‘MOVE’상태 도중에 전이되도록 했습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-스킬&quot;&gt;5. 스킬&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211260&amp;amp;authkey=%21AG1rjc4GEq6TYcg&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;SkillSword&quot; /&gt;
&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211256&amp;amp;authkey=%21ABwuoj-KZc2HBSY&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;SkillBow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보다 많은 컨트롤 요소와 재미를 위해 스킬을 제작했습니다.&lt;/p&gt;

&lt;p&gt;검, 활 두 가지의 무기마다 한 가지의 스킬을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;검 스킬의 경우 랜덤한 모션을 취하며, 검기의 잔상과 함께 불꽃을 전방으로 방출합니다.&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;불꽃이 적, 땅, 큰 오브젝트 등에 닿을 경우 이펙트와 함께 폭발하며, 적에게 적중했을 경우 데미지를 줍니다.&lt;/p&gt;

&lt;p&gt;활 스킬은 불 붙은 화살을 다수 발사하며, 검 스킬보다 데미지가 높지만 전부 적중시키기 어렵고, 쿨타임이 보다 길며, MP 소모량도 높습니다.&lt;/p&gt;

&lt;p&gt;GUI를 통해 스킬의 쿨타임을 실시간으로 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;상술한 검 스킬 구현의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void OnEnable()
{
    GameObject player = GameObject.Find(&quot;Player&quot;);
    Vector3 direction = player.transform.forward;
    StartCoroutine(DisableObject());
    StartCoroutine(Move(direction));
    hit = true;
}

IEnumerator Move(Vector3 direction)
{
    transform.Translate(direction * moveSpeed * Time.deltaTime);
    yield return null;
    if(gameObject.activeSelf)
        StartCoroutine(Move(direction));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;스킬을 사용하면 오브젝트 풀링 과정을 통해 스킬 이펙트가 활성화되고, 그 순간의 플레이어의 방향벡터&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector3 direction&lt;/code&gt;를 매개변수로 받아 계속 전진합니다. 따라서 스킬 사용 후 캐릭터가 움직여도 불꽃의 움직임에는 영향이 없습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-보스-패턴&quot;&gt;6. 보스 패턴&lt;/h2&gt;
&lt;p&gt;보스와의 1vs1 전투에서 가장 중요한 요소 중 하나는 특수 패턴입니다.&lt;/p&gt;

&lt;p&gt;일반적인 공격 및 도발 패턴 외에, 세 개의 특수 패턴을 구현했습니다.&lt;/p&gt;

&lt;h3 id=&quot;6-1-어스퀘이크&quot;&gt;6-1. 어스퀘이크&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211257&amp;amp;authkey=%21AGzfKz0yN6XdFUo&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;Earthquake&quot; /&gt;&lt;/p&gt;

&lt;p&gt;적이 제자리에서 공중으로 뛰어오른 후 바닥을 강하게 내려찍습니다. 이 준비동작 동안 데미지를 입을 수 있는 범위에 붉은색으로 경고표시가 짧게 발생됩니다.&lt;/p&gt;

&lt;p&gt;이 경고 이펙트의 수단으로 단순한 원형 오브젝트, Pointlight, Spotlight, Projection등을 이용해 다양하게 테스트했고, 가장 시인성이 좋은 Spotlight를 채택했습니다.&lt;/p&gt;

&lt;p&gt;땅을 찍는 순간 판정이 발생하며, 이 순간에 범위 밖에 있거나 공중에 있을 시 회피할 수 있습니다.&lt;/p&gt;

&lt;p&gt;2페이즈부터는 패턴이 강화되어, 땅을 찍은 후 주위에 랜덤하게 여러 개의 경고 이펙트가 발생하며, 일정 시간 후 해당 위치에 폭발이 추가로 발생합니다.&lt;/p&gt;

&lt;p&gt;3번째 특수 패턴인 익스플로전과 결합되면 적절한 타이밍에 회피해야 하는 높은 컨트롤 실력을 요구하게 됩니다.&lt;/p&gt;

&lt;p&gt;패턴 구현의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void SpecialHit()
{
    specialHit = true;
    if (specialHit &amp;amp;&amp;amp; GetDistance() &amp;lt;= 15 &amp;amp;&amp;amp; player.GetComponent&amp;lt;Animator&amp;gt;().GetBool(&quot;isGround&quot;))
    {
        specialHit = !specialHit;
        player.GetComponent&amp;lt;Animator&amp;gt;().Play(&quot;getSpecialHit&quot;);
        playerRgd.AddForce(new Vector3(0, 200f, 0));
        if (PlayerAxis.Instance.onAttack)
            PlayerAxis.Instance.onAttack = false;
        if (PlayerAxis.Instance.onCombo)
            PlayerAxis.Instance.onCombo = false;
        if (PlayerAxis.Instance.onSkill)
            PlayerAxis.Instance.onSkill = false;
        if (PlayerAxis.Instance.combo &amp;gt; 0)
            PlayerAxis.Instance.combo = 0;
        if (player.GetComponent&amp;lt;Player&amp;gt;().isRolling)
            player.GetComponent&amp;lt;Player&amp;gt;().isRolling = false;
        HealthCalculation(enemyATK * 5);
    }
    if(phase == 2)
    {
        // 오브젝트 풀링 부분. 생략
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;피격 시 크게 쓰러지는 애니메이션이 재생되고 공중으로 튕겨집니다. 수행중이던 모든 행동들이 초기화되고 데미지를 입습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-2-러쉬&quot;&gt;6-2. 러쉬&lt;sup id=&quot;fnref:4:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://onedrive.live.com/embed?resid=E08FD3FFC3FC8447%211255&amp;amp;authkey=%21AJszdAGpGiQxMzg&amp;amp;width=1920&amp;amp;height=1080&quot; alt=&quot;Rush&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2페이즈 부터 사용하는 패턴으로, 적이 몸에 불을 붙이고 빠르게 플레이어에게 돌진합니다.&lt;/p&gt;

&lt;p&gt;플레이어에게 붙은 순간 짧게 시간이 느려지며, 시간 안에 패링으로 반격하면 적을 역으로 넘어뜨릴 수 있습니다.&lt;/p&gt;

&lt;p&gt;실패할 경우 큰 데미지와 함께 멀리 날아가며, 이 또한 익스플로전과 결합되면 연타를 맞아 위험하기 때문에 막지 못하면 클리어가 매우 어려워지도록 설계했습니다.&lt;/p&gt;

&lt;p&gt;패턴 구현의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IEnumerator SpecialAttackRushJudge(float judgeTime)
{
    bool successful = false;
    while (judgeTime &amp;gt; 0)
    {
        yield return null;
        judgeTime -= Time.deltaTime;
        if (player.GetComponent&amp;lt;Player&amp;gt;().playerParry)
        {
            successful = true;
            StartCoroutine(CameraShake.Shake(2f, 3f, 1.5f));
            anim.SetBool(&quot;isRushSuccessful&quot;, false);
            anim.SetTrigger(&quot;rushEnd&quot;);
            specialAttackRushEffect.SetActive(false);
            Time.timeScale = 1;
            StartCoroutine(BloomControl.BloomOff(5f));
            yield return new WaitForSeconds(7f);
            onAttack = false;
        }
    }
	// 생략
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;judgeTime&lt;/code&gt;이내에 패링에 성공했을 경우 느려진 시간이 돌아오며 블룸 효과 및 패턴의 불꽃 이펙트도 사그라듭니다. 적은 넘어지며 7초간 행동불능 상태에 빠집니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-3-익스플로전&quot;&gt;6-3. 익스플로전&lt;sup id=&quot;fnref:4:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;최고 난이도 전용 패턴으로, 주기적으로 다음 중 하나를 랜덤하게 수행합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;플레이어의 자리에 경고 이펙트가 발생 후 폭발합니다.&lt;/li&gt;
  &lt;li&gt;플레이어의 전후좌우 4곳에 경고 이펙트가 발생 후 폭발합니다.&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;플레이어 주변에 랜덤하게 여러 개의 경고 이펙트가 발생 후 폭발합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;패턴 구현의 일부입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void SenatorDifficultyGroundExplosion()
{
    // 3개 중 1개의 패턴으로 오브젝트 풀링하여 수행
}

IEnumerator SenatorDifficultyCoroutine()
{
    yield return new WaitForSeconds(Random.Range(7.0f, 10.0f));
    if(controller.GetComponent&amp;lt;Controller&amp;gt;().cameraState != Controller.State.cutscene) // 컷신 중에는 폭발하면 안 되므로
        SenatorDifficultyGroundExplosion();
    if(PlayerAxis.Instance.difficulty == PlayerAxis.Difficulty.senator)
        StartCoroutine(SenatorDifficultyCoroutine());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;7~10초 사이의 랜덤한 간격으로 폭발을 발생시킵니다. 컷씬의 예외처리를 해줍니다.
&lt;br /&gt;&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;High Definition Render Pipeline. 고해상도 렌더 파이프라인으로, 고품질의 3D 렌더링에 적합한 렌더링 방식입니다. 프로젝트 초창기에는 일반 렌더 파이프라인으로 작업했으나, 보다 화려한 이펙트와 그래픽을 위해 변경했습니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Quick Time Event의 약자로 컷씬 도중에 주어지는 지시를 빠르게 수행하는 게임 플레이 방법입니다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;블리자드의 게임 ‘오버워치’의 영웅 라인하르트의 E스킬 “화염 강타”와 유사한 로직을 갖습니다. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;가칭으로, 코드나 대사 등에는 따로 명칭이 없습니다. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:4:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;따라서 가만히 그 자리에 있어야 안전합니다. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>이윤찬</name></author><category term="Unity Engine" /><category term="C#" /><category term="Game Project" /><summary type="html">소개</summary></entry><entry><title type="html">Soopr</title><link href="http://localhost:4000/soopr" rel="alternate" type="text/html" title="Soopr" /><published>2021-03-04T00:00:00+09:00</published><updated>2021-03-04T00:00:00+09:00</updated><id>http://localhost:4000/soopr</id><content type="html" xml:base="http://localhost:4000/soopr">&lt;p&gt;&lt;a href=&quot;https://www.soopr.co&quot;&gt;Soopr&lt;/a&gt; is the easiest way for you to add share &amp;amp; reaction buttons to your blog and website, integrate an URL shortener and simple to understand analytics service. Soopr lets you manage all of these using a powerful dashboard.&lt;/p&gt;

&lt;p&gt;Moonwalk uses Soopr for share and like buttons and it is already integrated. By default, Moonwalk shows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular&lt;/code&gt; Twitter, Facebook and Copy buttons in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base&lt;/code&gt; size. To add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;like&lt;/code&gt; button, please signup for free on &lt;a href=&quot;https://www.soopr.co&quot;&gt;Soopr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have signed up on Soopr, get a publish token for your website and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file and add it under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soopr&lt;/code&gt; key and restart the server.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;soopr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;publish-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ADD_YOUR_PUBLISH_TOKEN_HERE&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://www.soopr.co&quot;&gt;Soopr Website&lt;/a&gt; for more info on how to get the most out of Soopr.&lt;/p&gt;</content><author><name>이윤찬</name></author><category term="soopr" /><category term="config" /><summary type="html">Soopr is the easiest way for you to add share &amp;amp; reaction buttons to your blog and website, integrate an URL shortener and simple to understand analytics service. Soopr lets you manage all of these using a powerful dashboard.</summary></entry><entry><title type="html">Code</title><link href="http://localhost:4000/code" rel="alternate" type="text/html" title="Code" /><published>2021-01-08T00:00:00+09:00</published><updated>2021-01-08T00:00:00+09:00</updated><id>http://localhost:4000/code</id><content type="html" xml:base="http://localhost:4000/code">&lt;h1 id=&quot;language-test&quot;&gt;Language Test&lt;/h1&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;microrequests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;microrequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# mr is requests&apos; session object and you can use it in similar manner
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://httpbin.org/get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;gmail&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;time&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;yaml&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;erb&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Syntax: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; gmail-username gmail-password&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/config.yaml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ERB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;body&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# variable &apos;name&apos; is important given it is used in body as well&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;to&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sending to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_id&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;from&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;subject&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;javascript&quot;&gt;Javascript&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;webpack-merge&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;common&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./webpack.common.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;devtool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;inline-source-map&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;writeToDisk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;elixir&quot;&gt;Elixir&lt;/h2&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyAppWeb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BearerAuth&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conn&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_bearer_auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_from_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_bearer_auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bearer &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_req_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unauthorized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--bg-secondary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>이윤찬</name></author><summary type="html">Language Test</summary></entry><entry><title type="html">Post Example With Headings And Toc</title><link href="http://localhost:4000/post-example-with-headings-and-toc" rel="alternate" type="text/html" title="Post Example With Headings And Toc" /><published>2020-07-09T00:00:00+09:00</published><updated>2020-07-09T00:00:00+09:00</updated><id>http://localhost:4000/post-example-with-headings-and-toc</id><content type="html" xml:base="http://localhost:4000/post-example-with-headings-and-toc">&lt;p&gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Nunc a egestas tortor, sed feugiat leo.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;Table of contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-start&quot;&gt;The start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-middle&quot;&gt;The middle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-end&quot;&gt;The end&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Nunc a egestas tortor, sed feugiat leo. Vestibulum porta tincidunt tellus, vitae ornare tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed nunc neque, tempor in iaculis non, faucibus et metus. Etiam id nisl ut lorem gravida euismod.&lt;/p&gt;

&lt;h2 id=&quot;the-start&quot;&gt;&lt;a href=&quot;#the-start&quot;&gt;The start&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Fusce non velit cursus ligula mattis convallis vel at metus. Sed pharetra tellus massa, non elementum eros vulputate non. Suspendisse potenti. Quisque arcu felis, laoreet vel accumsan sit amet, fermentum at nunc. Sed massa quam, auctor in eros quis, porttitor tincidunt orci. Nulla convallis id sapien ornare viverra. Cras nec est lacinia ligula porta tincidunt. Nam a est eget ligula pellentesque posuere. Maecenas quis enim ac risus accumsan scelerisque. Aliquam vitae libero sapien. Etiam convallis, metus nec suscipit condimentum, quam massa congue velit, sit amet sollicitudin nisi tortor a lectus. Cras a arcu enim. Suspendisse hendrerit euismod est ac gravida. Donec vitae elit tristique, suscipit eros at, aliquam augue. In ac faucibus dui. Sed tempor lacus tristique elit sagittis, vitae tempor massa convallis.&lt;/p&gt;

&lt;h2 id=&quot;the-middle&quot;&gt;&lt;a href=&quot;#the-middle&quot;&gt;The middle&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Proin quis velit et eros auctor laoreet. Aenean eget nibh odio. Suspendisse mollis enim pretium, fermentum urna vitae, egestas purus. Donec convallis tincidunt purus, scelerisque fermentum eros sagittis vel. Aliquam ac aliquet risus, tempus iaculis est. Fusce molestie mauris non interdum hendrerit. Curabitur ullamcorper, eros vitae interdum volutpat, lacus magna lacinia turpis, at accumsan dui tortor vel lectus. Aenean risus massa, semper non lectus rutrum, facilisis imperdiet mi. Praesent sed quam quis purus auctor ornare et sed augue. Vestibulum non quam quis ligula luctus placerat sed sit amet erat. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Fusce auctor, sem eu volutpat dignissim, turpis nibh malesuada arcu, in consequat elit mauris quis sem. Nam tristique sit amet enim vel accumsan. Sed id nibh commodo, dictum sem id, semper quam.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;

&lt;p&gt;Donec ex lectus, tempus non lacinia quis, pretium non ipsum. Praesent est nunc, rutrum vel tellus eu, tristique laoreet purus. In rutrum orci sit amet ex ornare, sit amet finibus lacus laoreet. Etiam ac facilisis purus, eget porttitor odio. Suspendisse tempus dolor nec risus sodales posuere. Proin dui dui, mollis a consectetur molestie, lobortis vitae tellus. Vivamus at purus sed urna sollicitudin mattis. Mauris lacinia libero in lobortis pulvinar. Nullam sit amet condimentum justo. Donec orci justo, pharetra ut dolor non, interdum finibus orci. Proin vitae ante a dui sodales commodo ac id elit. Nunc vel accumsan nunc, sit amet congue nunc. Aliquam in lacinia velit. Integer lobortis luctus eros, in fermentum metus aliquet a. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.&lt;/p&gt;</content><author><name>이윤찬</name></author><summary type="html">Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Nunc a egestas tortor, sed feugiat leo.</summary></entry><entry><title type="html">Language Tests</title><link href="http://localhost:4000/language-tests" rel="alternate" type="text/html" title="Language Tests" /><published>2020-07-08T00:00:00+09:00</published><updated>2020-07-08T00:00:00+09:00</updated><id>http://localhost:4000/language-tests</id><content type="html" xml:base="http://localhost:4000/language-tests">&lt;p&gt;Note: Text is from &lt;a href=&quot;https://github.com/huangyz0918/moving&quot;&gt;moving&lt;/a&gt;, which is another good Jekyll theme.&lt;/p&gt;

&lt;h3 id=&quot;1-日本語テスト&quot;&gt;1. 日本語テスト&lt;/h3&gt;

&lt;p&gt;This is a Japanese test post to show you how japanese is displayed.&lt;/p&gt;

&lt;p&gt;私は昨日ついにその助力家というのの上よりするたなけれ。
最も今をお話団はちょうどこの前後なかろでくらいに困りがいるたをは帰着考えたなかって、そうにもするでうたらない。
がたを知っないはずも同時に九月をいよいよたありた。&lt;/p&gt;

&lt;p&gt;もっと槙さんにぼんやり金少し説明にえた自分大した人私か影響にというお関係たうませないが、この次第も私か兄具合に使うて、槙さんののに当人のあなたにさぞご意味と行くて私個人が小尊敬を聴いように同時に同反抗に集っだうて、いよいよまず相当へあっうからいだ事をしでなけれ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;それでそれでもご時日をしはずはたったいやと突き抜けるますて、その元がは行ったてという獄を尽すていけですた。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この中道具の日その学校はあなたごろがすまなりかとネルソンさんの考えるですん、辺の事実ないというご盲従ありたですと、爺さんのためが薬缶が結果までの箸の当時してならて、多少の十月にためからそういう上からとにかくしましないと触れべきものたで、ないうですと多少お人達したのでたた。&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://lipsum.sugutsukaeru.jp/index.cgi&quot;&gt;すぐ使えるダミーテキスト - 日本語 Lorem ipsum.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-繁体中文测试&quot;&gt;2. 繁体中文测试&lt;/h3&gt;

&lt;p&gt;This is a chinese test post to show you how chinese is displayed.&lt;/p&gt;

&lt;p&gt;善我王上魚、產生資西員合兒臉趣論。畫衣生這著爸毛親可時，安程幾？合學作。觀經而作建。都非子作這！法如言子你關！手師也。&lt;/p&gt;

&lt;p&gt;以也座論頭室業放。要車時地變此親不老高小是統習直麼調未，行年香一？&lt;/p&gt;

&lt;p&gt;就竟在，是我童示讓利分和異種百路關母信過明驗有個歷洋中前合著區亮風值新底車有正結，進快保的行戰從：弟除文辦條國備當來際年每小腳識世可的的外的廣下歌洲保輪市果底天影；全氣具些回童但倒影發狀在示，數上學大法很，如要我……月品大供這起服滿老？應學傳者國：山式排只不之然清同關；細車是！停屋常間又，資畫領生，相們制在？公別的人寫教資夠。資再我我！只臉夫藝量不路政吃息緊回力之；兒足灣電空時局我怎初安。意今一子區首者微陸現際安除發連由子由而走學體區園我車當會，經時取頭，嚴了新科同？很夫營動通打，出和導一樂，查旅他。坐是收外子發物北看蘭戰坐車身做可來。道就學務。&lt;/p&gt;

&lt;p&gt;國新故。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.richyli.com/tool/loremipsum/&quot;&gt;亂數假文產生器 - Chinese Lorem Ipsum.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-简体中文测试&quot;&gt;3. 简体中文测试&lt;/h3&gt;

&lt;p&gt;效育声去本义然空，各值太法心想，场强实地。 题铁习点儿表管少间千，只何政亲织文意部，千影画派证男须。 手反取长风治增非等直难群，连取及天他己事头级，影数弦适把气快目人。 专议以省通引而千个，格则口段度样水热马，地教少务改磨。 包思外心半院应她算斯，市外会快记路又火学，劳如肃它准众丧边。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;团算部住县单总边素格军所，合音府教看和广光采率位转，位用品根确针百。 证其标元角工方海接交他，论象切万世认一响义，治然身本风弦带题。 向我次路持加北，她不反心。 说总元军例市决，现始即算证养，规走还壳。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因林可相儿应满军，热影省条律因资再，整肃赤心将届。 局广写两量备验还，南教事争工民的，备进研上布。 素身电活非直，速这区交示从，百层达。 资量那毛什京身，白这快。 半打容三手开常价或，手严量般象式效，名可重芽门适。 来设什一我么，光界美么或，住身式准。 造酸改表委验众办地百养，商物战众本列听度名院，制压录丽快与千机内。 住需当四议决得命南然照按民置，当住命形金决否矿单外。 气象理离开新集增际，三划方工义很年关，拉许准孝口。 构片出干计由备美打养，持育总指承入无己。&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.cancms.com/content/dummytext&quot;&gt;假文生成器， lorem ipsum Chinese&lt;/a&gt;&lt;/p&gt;</content><author><name>이윤찬</name></author><summary type="html">Note: Text is from moving, which is another good Jekyll theme.</summary></entry><entry><title type="html">Very Very Very Long Title And Very Very Very Short Content</title><link href="http://localhost:4000/very-very-very-long-title-and-very-very-very-short-content" rel="alternate" type="text/html" title="Very Very Very Long Title And Very Very Very Short Content" /><published>2020-07-08T00:00:00+09:00</published><updated>2020-07-08T00:00:00+09:00</updated><id>http://localhost:4000/very-very-very-long-title-and-very-very-very-short-content</id><content type="html" xml:base="http://localhost:4000/very-very-very-long-title-and-very-very-very-short-content">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus. Nullam vestibulum metus eu purus malesuada, volutpat mattis leo facilisis.&lt;/p&gt;</content><author><name>이윤찬</name></author><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus. Nullam vestibulum metus eu purus malesuada, volutpat mattis leo facilisis.</summary></entry><entry><title type="html">Overview Post</title><link href="http://localhost:4000/overview-post" rel="alternate" type="text/html" title="Overview Post" /><published>2020-07-07T00:00:00+09:00</published><updated>2020-07-07T00:00:00+09:00</updated><id>http://localhost:4000/overview-post</id><content type="html" xml:base="http://localhost:4000/overview-post">&lt;p&gt;Lorem ipsum&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus.&lt;/p&gt;

&lt;h1 id=&quot;sample-heading-1&quot;&gt;Sample heading 1&lt;/h1&gt;
&lt;h2 id=&quot;sample-heading-2&quot;&gt;Sample heading 2&lt;/h2&gt;
&lt;h3 id=&quot;sample-heading-3&quot;&gt;Sample heading 3&lt;/h3&gt;
&lt;h4 id=&quot;sample-heading-4&quot;&gt;Sample heading 4&lt;/h4&gt;
&lt;h5 id=&quot;sample-heading-5&quot;&gt;Sample heading 5&lt;/h5&gt;
&lt;h6 id=&quot;sample-heading-6&quot;&gt;Sample heading 6&lt;/h6&gt;

&lt;p&gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Etiam id nisl ut lorem gravida euismod.&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;Unordered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fusce non velit cursus ligula mattis convallis vel at metus&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;Sed pharetra tellus massa, non elementum eros vulputate non.&lt;/li&gt;
  &lt;li&gt;Suspendisse potenti.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordered:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quisque arcu felis, laoreet vel accumsan sit amet, fermentum at nunc.&lt;/li&gt;
  &lt;li&gt;Sed massa quam, auctor in eros quis, porttitor tincidunt orci.&lt;/li&gt;
  &lt;li&gt;Nulla convallis id sapien ornare viverra.&lt;/li&gt;
  &lt;li&gt;Nam a est eget ligula pellentesque posuere.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;blockquote&quot;&gt;Blockquote&lt;/h2&gt;

&lt;p&gt;The following is a blockquote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspendisse tempus dolor nec risus sodales posuere. Proin dui dui, mollis a consectetur molestie, lobortis vitae tellus.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;thematic-breaks-hr&quot;&gt;Thematic breaks (&amp;lt;hr&amp;gt;)&lt;/h2&gt;

&lt;p&gt;Mauris viverra dictum ultricies&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Etiam id nisl ut lorem gravida euismod. &lt;strong&gt;You can put some text inside the horizontal rule like so.&lt;/strong&gt;&lt;/p&gt;

&lt;hr data-content=&quot;hr with text&quot; /&gt;

&lt;p&gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Etiam id nisl ut lorem gravida euismod. &lt;strong&gt;Or you can just have an clean horizontal rule.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Etiam id nisl ut lorem gravida euismod. Or you can just have an clean horizontal rule.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;Now some code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const ultimateTruth = &apos;follow middlepath&apos;;
console.log(ultimateTruth);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline code&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;Now a table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://www.abhinavsaxena.com/images/abhinav.jpeg&quot; alt=&quot;theme logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an image&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;this is a footnote. You should reach here if you click on the corresponding superscript number. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;hey there, don’t forget to read all the footnotes! &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;this is another footnote. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;this is a very very long footnote to test if a very very long footnote brings some problems or not; hope that there are no problems but you know sometimes problems arise from nowhere. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Abhinav Saxena</name></author><category term="overview" /><category term="moonwalk" /><summary type="html">Lorem ipsum1 dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus. this is a footnote. You should reach here if you click on the corresponding superscript number. &amp;#8617;</summary></entry></feed>